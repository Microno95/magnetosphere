!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module streamtracer ! in 
    interface  ! in :streamtracer
        module streamtracer ! in :streamtracer:Streamtracer.f90
            subroutine streamline_array(x0,nlines,v,nx,ny,nz,d,xc,dir,xs,ns,ds,rot,ns_out) ! in :streamtracer:Streamtracer.f90:streamtracer
                double precision dimension(nlines,3),intent(in) :: x0
                integer, optional,intent(in),check(shape(x0,0)==nlines),depend(x0) :: nlines=shape(x0,0)
                double precision dimension(nx,ny,nz,3),intent(in) :: v
                integer, optional,intent(in),check(shape(v,0)==nx),depend(v) :: nx=shape(v,0)
                integer, optional,intent(in),check(shape(v,1)==ny),depend(v) :: ny=shape(v,1)
                integer, optional,intent(in),check(shape(v,2)==nz),depend(v) :: nz=shape(v,2)
                double precision dimension(3),intent(in) :: d
                double precision dimension(3),intent(in) :: xc
                integer intent(in) :: dir
                double precision dimension(nlines,ns + 1,3),intent(out),depend(nlines,ns) :: xs
                integer intent(in) :: ns
                double precision intent(in) :: ds
                integer dimension(nlines),intent(out),depend(nlines) :: rot
                integer dimension(nlines),intent(out),depend(nlines) :: ns_out
            end subroutine streamline_array
            subroutine streamline(x0,v,nx,ny,nz,d,xc,dir,xs,ns,ds,rot,ns_out) ! in :streamtracer:Streamtracer.f90:streamtracer
                double precision dimension(3),intent(in) :: x0
                double precision dimension(nx,ny,nz,3),intent(in) :: v
                integer, optional,intent(in),check(shape(v,0)==nx),depend(v) :: nx=shape(v,0)
                integer, optional,intent(in),check(shape(v,1)==ny),depend(v) :: ny=shape(v,1)
                integer, optional,intent(in),check(shape(v,2)==nz),depend(v) :: nz=shape(v,2)
                double precision dimension(3),intent(in) :: d
                double precision dimension(3),intent(in) :: xc
                integer intent(in) :: dir
                double precision dimension(ns + 1,3),intent(out),depend(ns) :: xs
                integer intent(in) :: ns
                double precision intent(in) :: ds
                integer intent(out) :: rot
                integer intent(out) :: ns_out
            end subroutine streamline
            subroutine stream_function(xi,v,nx,ny,nz,d,xc,dir,f,rot) ! in :streamtracer:Streamtracer.f90:streamtracer
                double precision dimension(3),intent(in) :: xi
                double precision dimension(nx,ny,nz,3),intent(in) :: v
                integer, optional,intent(in),check(shape(v,0)==nx),depend(v) :: nx=shape(v,0)
                integer, optional,intent(in),check(shape(v,1)==ny),depend(v) :: ny=shape(v,1)
                integer, optional,intent(in),check(shape(v,2)==nz),depend(v) :: nz=shape(v,2)
                double precision dimension(3),intent(in) :: d
                double precision dimension(3),intent(in) :: xc
                integer intent(in) :: dir
                double precision dimension(3),intent(out) :: f
                integer intent(out) :: rot
            end subroutine stream_function
            subroutine interpolate(xi,v,nx,ny,nz,d,xc,vi,rot) ! in :streamtracer:Streamtracer.f90:streamtracer
                double precision dimension(3),intent(in) :: xi
                double precision dimension(nx,ny,nz,3),intent(in) :: v
                integer, optional,intent(in),check(shape(v,0)==nx),depend(v) :: nx=shape(v,0)
                integer, optional,intent(in),check(shape(v,1)==ny),depend(v) :: ny=shape(v,1)
                integer, optional,intent(in),check(shape(v,2)==nz),depend(v) :: nz=shape(v,2)
                double precision dimension(3),intent(in) :: d
                double precision dimension(3),intent(in) :: xc
                double precision dimension(3),intent(out) :: vi
                integer intent(out) :: rot
            end subroutine interpolate
            subroutine interp_trilinear(xd,f,fi) ! in :streamtracer:Streamtracer.f90:streamtracer
                double precision dimension(3),intent(in) :: xd
                double precision dimension(2,2,2),intent(in) :: f
                double precision intent(out) :: fi
            end subroutine interp_trilinear
        end module streamtracer
    end interface 
end python module streamtracer

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
